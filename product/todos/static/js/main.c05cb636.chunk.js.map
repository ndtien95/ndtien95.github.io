{"version":3,"sources":["Components/TodoForm/index.js","Components/TodoList/index.js","firebaseConnect/index.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","onSubmit","useState","value","setValue","className","e","preventDefault","title","state","type","onChange","target","defaultProps","TodoList","todos","onTodoClick","onTodoCheck","onTodoClear","map","index","key","id","onClick","handleClick","handleCheck","icon","faCheck","handelShowCheck","length","faTrashAlt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","data","database","ref","App","todoList","setTodoList","useEffect","on","snapshot","arrData","forEach","element","val","push","errorObject","console","log","code","formValues","child","remove","update","set","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c05cb636.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nTodoForm.propTypes = {\r\n    onSubmit: PropTypes.func\r\n};\r\nTodoForm.defaultProps = {\r\n    onSubmit: null,\r\n}\r\n\r\nfunction TodoForm(props) {\r\n    const { onSubmit } = props;\r\n    const [value, setValue] = useState('');\r\n\r\n    function handelValueChange(e) {\r\n      //  console.log(e.target.value);\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if(!onSubmit)return;\r\n        \r\n        const formValue={\r\n            title:value,\r\n            state:false\r\n        }\r\n        onSubmit(formValue);\r\n        setValue('');\r\n    }\r\n    return (\r\n        <form className=\"todo__form\" onSubmit={handleSubmit}>\r\n            <input className=\"todo__form-text\" type=\"text\" value={value} onChange={handelValueChange}></input>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck,faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.array,\r\n    onTodoClick: PropTypes.func\r\n};\r\n//trường hợp thằng cha không truyền xuống sẽ lấy gt mặc định\r\nTodoList.defaultProps = {\r\n    todos: [],\r\n    onTodoClick: null,\r\n    onTodoCheck: null\r\n}\r\n\r\nfunction TodoList(props) {\r\n    const { todos, onTodoClick, onTodoCheck, onTodoClear } = props;\r\n\r\n\r\n    function handleClick(index) {\r\n        if (onTodoClick) {\r\n            onTodoClick(index);\r\n        }\r\n    }\r\n    function handleCheck(index) {\r\n        if (onTodoCheck) {\r\n            onTodoCheck(index);\r\n        }\r\n    }\r\n\r\n    function handelShowCheck(index){\r\n       return index.state===true?<FontAwesomeIcon icon={faCheck}/> : \"\"\r\n    }\r\n\r\n    function handleClearAll(){\r\n        if(!onTodoClear) return;\r\n        onTodoClear();\r\n    }\r\n\r\n    function handleShowClear() {\r\n       \r\n        \r\n        return todos.length>1? <button onClick={()=>handleClearAll()} className=\"btn__clear \"><FontAwesomeIcon icon={faTrashAlt}/></button>:\"\"\r\n    }\r\n    \r\n    \r\n    return (\r\n\r\n        <ul className=\"todo__list\">\r\n            {todos.map(index => (\r\n                <li className=\"todo__item\" key={index.id}>\r\n                    <div className=\"todo__item-text\" onClick={() => handleClick(index)}>{index.title}</div>\r\n                    <span onClick={() => handleCheck(index)} className=\"todo__item-check\">{handelShowCheck(index)}</span>\r\n                </li>\r\n            ))}\r\n                {handleShowClear()}\r\n               \r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default TodoList;","\r\nimport firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDa439FJbAqz2hLJ0XMuCLtbd7bzqDLwwc\",\r\n    authDomain: \"todo-list-16428.firebaseapp.com\",\r\n    databaseURL: \"https://todo-list-16428.firebaseio.com\",\r\n    projectId: \"todo-list-16428\",\r\n    storageBucket: \"todo-list-16428.appspot.com\",\r\n    messagingSenderId: \"354333533518\",\r\n    appId: \"1:354333533518:web:0b7d9e2a0349f0cff6aa1f\",\r\n    measurementId: \"G-2BNPTKWN48\"\r\n};\r\n\r\n\r\n//firebase.analytics();\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const data = firebase.database().ref('todoList/');\r\n//export const delData= firebase.database().ref('todoList/');\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport TodoForm from './Components/TodoForm';\nimport TodoList from './Components/TodoList';\nimport { data } from './firebaseConnect';\n\n\nfunction App() {\n\n  const [todoList, setTodoList] = useState([])\n\n  useEffect(() => {\n    data.on(\"value\", function (snapshot) {\n      let arrData = [];\n      snapshot.forEach(element => {\n        const key = element.key;\n        const value = element.val().title\n        const state = element.val().state\n        arrData.push({\n          id: key,\n          title: value,\n          state: state\n        })\n\n      });\n\n      setTodoList(arrData)\n    }, function (errorObject) {\n      console.log(\"The read failed: \" + errorObject.code);\n    });\n  }, [data])\n\n  function handleTodoFormSubmit(formValues) {\n    // let num = Math.floor(Math.random() * 1000 + todoList.length);\n    // const newTodo = {\n    //   id: num,\n    //   ...formValues\n    // }\n    // const newTodoList = [...todoList];\n    // newTodoList.push(newTodo);\n    // setTodoList(newTodoList)\n    // console.log(todoList);\n    data.push(formValues)\n  }\n\n  function handleTodoLick(index) {\n    // const i = todoList.findIndex(el => el.id === index.id)\n    // if (i < 0) return;\n    // const newTodoList = [...todoList];\n    // newTodoList.splice(i, 1);\n    // setTodoList(newTodoList);\n    data.child(index.id).remove();\n\n  }\n  function handleTodoClear(){\n    data.set('')\n    \n  }\n  function handleCheck(index) {\n    data.child(index.id).update({\n      state: !index.state,\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Todo List</h1>\n      </header>\n      <section className=\"App-body\">\n        <TodoForm onSubmit={handleTodoFormSubmit} />\n        <TodoList todos={todoList} onTodoClick={handleTodoLick} onTodoCheck={handleCheck} onTodoClear={handleTodoClear} />\n      </section>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}